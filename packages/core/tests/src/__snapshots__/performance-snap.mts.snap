// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`performance tests () => {
                // setup
                const a = BigNum.valueOf(20.56);
                return () => a.pow(48.723);
            }
  ->
  () => a.pow(48.723) 1`] = `411.18304199999994`;

exports[`performance tests () => {
                // setup
                const a = BigNum.valueOf(123456789.12345678);
                return [
                    () => {
                        for (let i = 0; i < 100; i++) {
                            a.sqrt();
                        }
                    },
                    () => {
                        for (let i = 0; i < 100; i++) {
                            a.nthRoot(2);
                        }
                    },
                ];
            }
  ->(1)
  () => {
                          for (let i = 0; i < 100; i++) {
                              a.sqrt();
                          }
                      } 1`] = `2.039166000000023`;

exports[`performance tests () => {
                // setup
                const a = BigNum.valueOf(123456789.12345678);
                return [
                    () => {
                        for (let i = 0; i < 100; i++) {
                            a.sqrt();
                        }
                    },
                    () => {
                        for (let i = 0; i < 100; i++) {
                            a.nthRoot(2);
                        }
                    },
                ];
            }
  ->(2)
  () => {
                          for (let i = 0; i < 100; i++) {
                              a.nthRoot(2);
                          }
                      } 1`] = `1.750957999999855`;

exports[`performance tests () => {
                // setup
                const n = 123456789n ** 1234n;
                return () => {
                    for (let i = 0; i < 100; i++) {
                        length(n);
                    }
                };
            }
  ->
  () => {
                      for (let i = 0; i < 100; i++) {
                          length(n);
                      }
                  } 1`] = `28.061124999999947`;

exports[`performance tests () => {
                // setup
                const n = 123456789n ** 1234n;
                return () => {
                    for (let i = 0; i < 100; i++) {
                        n.toString();
                    }
                };
            }
  ->
  () => {
                      for (let i = 0; i < 100; i++) {
                          n.toString();
                      }
                  } 1`] = `27.23591600000009`;

exports[`performance tests () => {
                // setup
                let a;
                return [
                    () => (a = BigNum.valueOf(20.56).pow(48.723)),
                    () => a.toString(),
                ];
            }
  ->(1)
  () => (a = BigNum.valueOf(20.56).pow(48.723)) 1`] = `376.49016700000004`;

exports[`performance tests () => {
                // setup
                let a;
                return [
                    () => (a = BigNum.valueOf(20.56).pow(48.723)),
                    () => a.toString(),
                ];
            }
  ->(2)
  () => a.toString() 1`] = `143.93958299999986`;

exports[`performance tests () => BigNum.valueOf(100).pow(123.456) 1`] = `2.5254169999999476`;
