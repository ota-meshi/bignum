// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`standard tests () => BigNum.valueOf(".1").multiply(5).round() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(".1").multiply(10).ceil() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(".1").multiply(10).round() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf("-.1").multiply(5).round() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf("-.1").multiply(10).floor() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf("-.1").multiply(10).round() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf("2e2").divide(1000).add(0.1) 1`] = `"0.3"`;

exports[`standard tests () => BigNum.valueOf(-0).ceil() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-0).floor() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-0).round() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-0).trunc() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-0.001).divide(-0.003) 1`] = `"\\"0.33333333333333333333\\""`;

exports[`standard tests () => BigNum.valueOf(-0.001).divide(0.003) 1`] = `"\\"-0.33333333333333333333\\""`;

exports[`standard tests () => BigNum.valueOf(-1).abs() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(-1).ceil() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1).divide(-3) 1`] = `"\\"0.33333333333333333333\\""`;

exports[`standard tests () => BigNum.valueOf(-1).divide(3) 1`] = `"\\"-0.33333333333333333333\\""`;

exports[`standard tests () => BigNum.valueOf(-1).floor() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1).modulo(3) 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1).negate() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(-1).round() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1).signum() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1).trunc() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.5).ceil() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.5).floor() 1`] = `"-2"`;

exports[`standard tests () => BigNum.valueOf(-1.5).round() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.5).trunc() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.499).ceil() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.499).floor() 1`] = `"-2"`;

exports[`standard tests () => BigNum.valueOf(-1.499).round() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.499).trunc() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.501).ceil() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-1.501).floor() 1`] = `"-2"`;

exports[`standard tests () => BigNum.valueOf(-1.501).round() 1`] = `"-2"`;

exports[`standard tests () => BigNum.valueOf(-1.501).trunc() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-2.944).modulo(-0.128) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-3).add(-Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-3).add(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-3).divide(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-3).divide(Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-3).modulo(-Infinity) 1`] = `"-3"`;

exports[`standard tests () => BigNum.valueOf(-3).modulo(3) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-3).modulo(Infinity) 1`] = `"-3"`;

exports[`standard tests () => BigNum.valueOf(-3).multiply(-Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-3).multiply(Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-3).subtract(-Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-3).subtract(Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-10).modulo(3) 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).abs() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).add(-3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).add(-Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).add(3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).add(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).ceil() 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).compareTo(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).compareTo(0) 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).compareTo(Infinity) 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).divide(-3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).divide(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).divide(0) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).divide(3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).divide(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).floor() 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).isNaN() 1`] = `"false"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).modulo(-3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).modulo(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).modulo(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).modulo(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).multiply(-3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).multiply(-Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).multiply(0) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).multiply(3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).multiply(Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).negate() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).nthRoot(-2) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).nthRoot(-Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).nthRoot(2) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).nthRoot(Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).pow(-2) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).pow(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).pow(2) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).pow(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).round() 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).scaleByPowerOfTen(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).scaleByPowerOfTen(1) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).scaleByPowerOfTen(Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).signum() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).sqrt() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).subtract(-3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).subtract(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).subtract(3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).subtract(Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(-Infinity).trunc() 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(0).abs() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).ceil() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).compareTo(-Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(0).compareTo(Infinity) 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(0).divide(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).divide(Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).floor() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).multiply(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(0).multiply(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(0).negate() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).round() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).signum() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).sqrt() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0).trunc() 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0.001).compareTo(0.001) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(0.001).compareTo(0.002) 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(0.001).multiply(0.001) 1`] = `"0.000001"`;

exports[`standard tests () => BigNum.valueOf(0.001).multiply(0.002) 1`] = `"0.000002"`;

exports[`standard tests () => BigNum.valueOf(0.002).compareTo(0.001) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(0.002).multiply(0.001) 1`] = `"0.000002"`;

exports[`standard tests () => BigNum.valueOf(0.02).add(0.1) 1`] = `"0.12"`;

exports[`standard tests () => BigNum.valueOf(0.02).subtract(0.1) 1`] = `"-0.08"`;

exports[`standard tests () => BigNum.valueOf(0.0145).sqrt() 1`] = `"\\"0.1204159457879229548\\""`;

exports[`standard tests () => BigNum.valueOf(0.2).add(0.01) 1`] = `"0.21"`;

exports[`standard tests () => BigNum.valueOf(0.2).add(0.1) 1`] = `"0.3"`;

exports[`standard tests () => BigNum.valueOf(0.2).nthRoot(2) 1`] = `"\\"0.44721359549995793928\\""`;

exports[`standard tests () => BigNum.valueOf(0.2).nthRoot(3) 1`] = `"\\"0.5848035476425732131\\""`;

exports[`standard tests () => BigNum.valueOf(0.2).nthRoot(4) 1`] = `"\\"0.668740304976422024\\""`;

exports[`standard tests () => BigNum.valueOf(0.2).nthRoot(BigNum.valueOf(0.2).add(3.8)) 1`] = `"\\"0.668740304976422024\\""`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(-2) 1`] = `"25"`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(-3) 1`] = `"125"`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(-4) 1`] = `"625"`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(2) 1`] = `"0.04"`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(3) 1`] = `"0.008"`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(4) 1`] = `"0.0016"`;

exports[`standard tests () => BigNum.valueOf(0.2).pow(BigNum.valueOf(0.2).add(3.8)) 1`] = `"0.0016"`;

exports[`standard tests () => BigNum.valueOf(0.2).scaleByPowerOfTen(2) 1`] = `"20"`;

exports[`standard tests () => BigNum.valueOf(0.2).scaleByPowerOfTen(3) 1`] = `"200"`;

exports[`standard tests () => BigNum.valueOf(0.2).scaleByPowerOfTen(4) 1`] = `"2000"`;

exports[`standard tests () => BigNum.valueOf(0.2).subtract(0.01) 1`] = `"0.19"`;

exports[`standard tests () => BigNum.valueOf(0.3).subtract(0.1) 1`] = `"0.2"`;

exports[`standard tests () => BigNum.valueOf(0.5625).sqrt() 1`] = `"0.75"`;

exports[`standard tests () => BigNum.valueOf(1).abs() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1).ceil() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1).divide(3) 1`] = `"\\"0.33333333333333333333\\""`;

exports[`standard tests () => BigNum.valueOf(1).floor() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1).modulo(3) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1).negate() 1`] = `"-1"`;

exports[`standard tests () => BigNum.valueOf(1).round() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1).scaleByPowerOfTen(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(1).scaleByPowerOfTen(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(1).signum() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1).trunc() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.5).ceil() 1`] = `"2"`;

exports[`standard tests () => BigNum.valueOf(1.5).floor() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.5).round() 1`] = `"2"`;

exports[`standard tests () => BigNum.valueOf(1.5).sqrt() 1`] = `"\\"1.22474487139158904909\\""`;

exports[`standard tests () => BigNum.valueOf(1.5).trunc() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.499).ceil() 1`] = `"2"`;

exports[`standard tests () => BigNum.valueOf(1.499).floor() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.499).round() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.499).sqrt() 1`] = `"\\"1.22433655503705352691\\""`;

exports[`standard tests () => BigNum.valueOf(1.499).trunc() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.501).ceil() 1`] = `"2"`;

exports[`standard tests () => BigNum.valueOf(1.501).floor() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(1.501).round() 1`] = `"2"`;

exports[`standard tests () => BigNum.valueOf(1.501).sqrt() 1`] = `"\\"1.22515305166334218293\\""`;

exports[`standard tests () => BigNum.valueOf(1.501).trunc() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(2).multiply(0.1).add(0.1) 1`] = `"0.3"`;

exports[`standard tests () => BigNum.valueOf(2).nthRoot(-Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(2).nthRoot(2) 1`] = `"\\"1.4142135623730950488\\""`;

exports[`standard tests () => BigNum.valueOf(2).nthRoot(3) 1`] = `"\\"1.25992104989487316476\\""`;

exports[`standard tests () => BigNum.valueOf(2).nthRoot(4) 1`] = `"\\"1.18920711500272106671\\""`;

exports[`standard tests () => BigNum.valueOf(2).nthRoot(Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(2).pow(-2) 1`] = `"0.25"`;

exports[`standard tests () => BigNum.valueOf(2).pow(-3) 1`] = `"0.125"`;

exports[`standard tests () => BigNum.valueOf(2).pow(-4) 1`] = `"0.0625"`;

exports[`standard tests () => BigNum.valueOf(2).pow(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(2).pow(2) 1`] = `"4"`;

exports[`standard tests () => BigNum.valueOf(2).pow(3) 1`] = `"8"`;

exports[`standard tests () => BigNum.valueOf(2).pow(4) 1`] = `"16"`;

exports[`standard tests () => BigNum.valueOf(2).pow(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(-2) 1`] = `"0.02"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(-2) 2`] = `"0.02"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(-3) 1`] = `"0.002"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(-3) 2`] = `"0.002"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(-4) 1`] = `"0.0002"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(-4) 2`] = `"0.0002"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(2) 1`] = `"200"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(3) 1`] = `"2000"`;

exports[`standard tests () => BigNum.valueOf(2).scaleByPowerOfTen(4) 1`] = `"20000"`;

exports[`standard tests () => BigNum.valueOf(2).sqrt() 1`] = `"\\"1.4142135623730950488\\""`;

exports[`standard tests () => BigNum.valueOf(2.25).sqrt() 1`] = `"1.5"`;

exports[`standard tests () => BigNum.valueOf(3).add(-Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(3).add(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(3).add(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).compareTo(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).divide(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(3).divide(Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(3).divide(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).modulo(-Infinity) 1`] = `"3"`;

exports[`standard tests () => BigNum.valueOf(3).modulo(3) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(3).modulo(Infinity) 1`] = `"3"`;

exports[`standard tests () => BigNum.valueOf(3).modulo(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).multiply(-Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(3).multiply(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(3).multiply(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).nthRoot(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).pow(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).scaleByPowerOfTen(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(3).sqrt() 1`] = `"\\"1.73205080756887729352\\""`;

exports[`standard tests () => BigNum.valueOf(3).subtract(-Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(3).subtract(Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(3).subtract(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(4).sqrt() 1`] = `"2"`;

exports[`standard tests () => BigNum.valueOf(5).sqrt() 1`] = `"\\"2.2360679774997896964\\""`;

exports[`standard tests () => BigNum.valueOf(6).sqrt() 1`] = `"\\"2.44948974278317809819\\""`;

exports[`standard tests () => BigNum.valueOf(7).sqrt() 1`] = `"\\"2.6457513110645905905\\""`;

exports[`standard tests () => BigNum.valueOf(8).sqrt() 1`] = `"\\"2.8284271247461900976\\""`;

exports[`standard tests () => BigNum.valueOf(9).sqrt() 1`] = `"3"`;

exports[`standard tests () => BigNum.valueOf(10).modulo(3) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(10).sqrt() 1`] = `"\\"3.16227766016837933199\\""`;

exports[`standard tests () => BigNum.valueOf(22.25).sqrt() 1`] = `"\\"4.71699056602830190566\\""`;

exports[`standard tests () => BigNum.valueOf(123.456).isNaN() 1`] = `"false"`;

exports[`standard tests () => BigNum.valueOf(200).divide(100).add(0.1) 1`] = `"2.1"`;

exports[`standard tests () => BigNum.valueOf(271441).sqrt() 1`] = `"521"`;

exports[`standard tests () => BigNum.valueOf(Infinity).abs() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).add(-3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).add(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).add(3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).add(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).ceil() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).compareTo(-Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(Infinity).compareTo(0) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(Infinity).compareTo(Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(Infinity).divide(-3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).divide(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).divide(0) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).divide(3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).divide(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).floor() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).isNaN() 1`] = `"false"`;

exports[`standard tests () => BigNum.valueOf(Infinity).modulo(-3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).modulo(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).modulo(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).modulo(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).multiply(-3) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).multiply(-Infinity) 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).multiply(0) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).multiply(3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).multiply(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).negate() 1`] = `"-Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).nthRoot(-2) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(Infinity).nthRoot(-Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(Infinity).nthRoot(2) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).nthRoot(Infinity) 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(Infinity).pow(-2) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(Infinity).pow(-Infinity) 1`] = `"0"`;

exports[`standard tests () => BigNum.valueOf(Infinity).pow(2) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).pow(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).round() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).scaleByPowerOfTen(-Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).scaleByPowerOfTen(1) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).scaleByPowerOfTen(Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).signum() 1`] = `"1"`;

exports[`standard tests () => BigNum.valueOf(Infinity).sqrt() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).subtract(-3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).subtract(-Infinity) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).subtract(3) 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(Infinity).subtract(Infinity) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(Infinity).trunc() 1`] = `"Infinity"`;

exports[`standard tests () => BigNum.valueOf(NaN).abs() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).add(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).add(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).ceil() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).compareTo(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).compareTo(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).divide(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).divide(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).floor() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).isNaN() 1`] = `"true"`;

exports[`standard tests () => BigNum.valueOf(NaN).modulo(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).modulo(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).multiply(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).multiply(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).negate() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).nthRoot(-3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).nthRoot(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).nthRoot(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).pow(-3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).pow(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).pow(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).round() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).scaleByPowerOfTen(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).scaleByPowerOfTen(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).signum() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).sqrt() 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).subtract(3) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).subtract(NaN) 1`] = `"NaN"`;

exports[`standard tests () => BigNum.valueOf(NaN).trunc() 1`] = `"NaN"`;
